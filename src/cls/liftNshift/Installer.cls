Include %occInclude

/// Sample Installer
Class liftNshift.Installer
{

/// Application Definition
XData MyApp [ XMLNamespace = INSTALLER ]
{
<Manifest>
<If Condition='$L("${NAMESPACE}")=0'>
<!-- Report an error if the namespace wasn't specified -->
<Error Status="$$$NamespaceDoesNotExist">
<Arg Value="${NAMESPACE}"/>
</Error>
</If>

<Namespace Name="LIFTNSHIFT">
<!-- Invoke a helper method on this installer class -->
<Invoke Class="liftNshift.Installer" Method="Message" CheckStatus="0"/>
</Namespace>

<!-- Do some setup -->
<Var Name="MYAPPDIR" Value="${MYAPPDIR}/liftNshift"/>
<Var Name="DBRESOURCE" Value="%DB_${NAMESPACE}"/>
<Var Name="MYAPPRESOURCE" Value="%DB_MYAPP"/>
<Var Name="PRODUCTION" Value="liftNshift.Production"/>
<Var Name="USERNAME" Value="Lincoln,Abraham"/>

<User Username="TEST"
      Fullname="${USERNAME}"
      PasswordVar="USERNAME"
      Roles="%Developer,%All"
      />

<!-- Create the namespace, yes it's Ensemble enabled for MyApp -->
<Namespace Name="${NAMESPACE}"
          Create="yes"
          Code="${NAMESPACE}"
          Data="${NAMESPACE}"
          Ensemble="1"
          EnsemblePortalPrefix="liftNshift"
          EnsemblePortalSuffix="ensemble"
          EnsemblePortalGrant="${DBRESOURCE}"
		  >

<Configuration>

<!-- Create a "data" database -->
<Database Name="${NAMESPACE}"
		 Dir="${MGRDIR}/${NAMESPACE}"
		 Create="yes"
		 Resource="${DBRESOURCE}"
		 PublicPermissions=""/>

<!-- Add the existing MyApp database as the code database for this namespace -->
<Database Name="liftNshift"
		 Dir="${MYAPPDIR}/db"
		 Create="no"
		 Resource="${MYAPPRESOURCE}"
		 PublicPermissions=""/>

<!-- MyApp mappings back to the MYAPP DB.
-->
<GlobalMapping Global="liftNshiftData.*"    	From="liftNshift"/>
<GlobalMapping Global="cspRule"  		From="liftNshift"/>

<ClassMapping Package="liftNshift"    		From="liftNshift"/>

<RoutineMapping Routines="LIFTNSHIFT" Type="INC" From="liftNshift"/>
</Configuration>

<!-- Check for an upgrade vs install -->
<Invoke Class="liftNshift.Installer" Method="IsUpgrade" Return="ISUPGRADE"/>

<!-- MyApp setup, load some data in -->
<Import File="${MYAPPDIR}/data/Defaults.gof"/>

<!-- Load patch classes (if they exist) -->
<If Condition='#{##class(%File).DirectoryExists("${MYAPPDIR}/patch/")}'>
<!-- Load a directory full of files, ignore error 5202 ... -->
<Import File="	imports/" IgnoreErrors="5202" Flags="ck"/>
</If>

<!-- Configure MyApp -->
<Invoke Class="liftNshift.Installer" Method="SetupDefaults" CheckStatus="1">
<Arg Value="${NAMESPACE}"/>
<Arg Value="${ISUPGRADE}"/>						<!-- True if upgrading -->
</Invoke>

<If Condition="'${ISUPGRADE}">
<!-- Compile the production for a new install -->
<Compile Class="${PRODUCTION}" Flags="ck"/>

<!-- Configure the production -->
<Production Name="${PRODUCTION}">
<Setting Item="FOO"
		Target="Host"
		Setting="Upgraded"
		Value="${ISUPGRADE}"/>
<Setting Item="FOO"
	    Target="Host"
	    Setting="Namespace"
	     Value="${NAMESPACE}"/>
<Setting Item="FOO"
	    Target="Host"
	    Setting="BufferSize"
	     Value="16384,8192"/>
</Production>
</If>

<!-- System settings changes required for MyApp -->
<SystemSetting Name="Config.Miscellaneous.EnableLongStrings" Value="1"/>

<!-- Create a CSP application for the namespace -->
<Var Name="URL" Value='/csp/liftnshift/#{$ZCVT("${NAMESPACE}","L")}'/>
<Var Name="DIR" Dir='${CSPDIR}liftnshift/#{$ZCVT("${NAMESPACE}","L")}'/>

<CSPApplication Url="${URL}"
			   Directory="${DIR}"
	           Resource=""
	           Grant="${DBRESOURCE}"
	           Description="liftNshift CSP Interface"
	           Recurse="1"
	           CookiePath="/csp/liftnshift"
	           AuthenticationMethods="32"
	 />

</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
	#; Let our XGL document generate code for this method. 
	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "MyApp")
}

ClassMethod Message()
{
	WRITE $TR($J("",60)," ","="),!
	WRITE $ZV,!
	WRITE $TR($J("",60)," ","="),!
}

/// Setup defaults for this MyApp system
ClassMethod SetupDefaults(pNamespace As %String = {$ZU(5)}, pUpgrading As %Boolean) As %Status
{
	#dim tSC As %Status
	Set tSC=$$$OK,$ZT="Trap"
	Do {
	
	    // Do whatever here ...
		
	} While (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$ERROR($$$CacheError,$ZE)
	Goto Exit
}

ClassMethod IsUpgrade(pNamespace As %String = {$ZU(5)}) As %Boolean [ CodeMode = expression ]
{
$RANDOM(2)
}

/// Invoke the installer passing in some variables
ClassMethod RunInstall() As %Status
{
	#dim tVars
	#dim tStatus As %Status
	#dim tLogLevel As %Integer = 1
	
	// Initialize any variables we want to pass to the installer
	Set tVars("NAMESPACE") = "liftNshift"
	
	// Invoke the installer
	Set tStatus = ..setup(.tVars,tLogLevel)
	
	Do:$$$ISERR(tStatus) $system.OBJ.DisplayError(tStatus)
	
	Quit tStatus
}

/// Invoke the installer passing in some variables
ClassMethod RunInstallWithLog(pLogfile As %String) As %Status
{
	#dim tVars
	#dim tStatus As %Status
	#dim tLogLevel As %Integer = 1
	
	// Initialize any variables we want to pass to the installer
	Set tVars("NAMESPACE") = "liftNshift"

	// Construct a file logger
	#dim tLogger As %Installer.FileLogger = ##class(%Installer.FileLogger).%New(1,pLogfile)
	
	// Invoke the installer
	Set tStatus = ..setup(.tVars,tLogLevel,,tLogger)
	
	Do:$$$ISERR(tStatus) $system.OBJ.DisplayError(tStatus)
	
	Quit tStatus
}

}
